from module_main_fuctions import MODULE_MAIN
from module_todoist import TODOIS_MODULE
from module_dropbox import DROPBOX_MODULE
from module_mail import MAIL_MODULE
from config_con import *


import re, os, time
import youtube_dl
import os
import translators as ts


import telebot

from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, Updater, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler, DispatcherHandlerStop
from telegram.error import (TelegramError, Unauthorized, BadRequest,
                            TimedOut, ChatMigrated, NetworkError)


############################### variables ###########################################

m1 = MODULE_MAIN()
td1 = TODOIS_MODULE()
d1 = DROPBOX_MODULE()
mail1 = MAIL_MODULE()

PORT = int(os.environ.get('PORT', '8443'))
TODOLIST_API = os.environ.get('TODOLIST_API')
TOKEN = os.environ.get('TELEGRAM_SOLBOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

def key_reply_start():
    button_start = KeyboardButton('üìï MENU')
    button_faq = KeyboardButton('‚ùì FAQ')
    button_test = KeyboardButton('üé¨ TEST')
    button_chatbot = KeyboardButton('ü§ñ Talk to Chatbot')
    keyboard = ReplyKeyboardMarkup([[button_start, button_test], [button_chatbot]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_main():
    button_menu = KeyboardButton('üìï MENU')
    button_test = KeyboardButton('üé¨ TEST')
    button_mydata = KeyboardButton('üìÇ My Data')
    button_translate = KeyboardButton('üá∫üá∏-üá∑üá∫ Translate')
    button_chatbot = KeyboardButton('ü§ñ Talk to Chatbot')
    button_back = KeyboardButton('üîô Back')
    button_stt = KeyboardButton('üîâ STT & TTS')
    keyboard = ReplyKeyboardMarkup([[button_mydata, button_chatbot], [button_stt, button_translate]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_short():
    button_menu = KeyboardButton('üìï MENU')
    keyboard = ReplyKeyboardMarkup([[button_menu]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_text():
    button2 = KeyboardButton('‚è∞ Add note')
    button3 = KeyboardButton('üìß Send mail')
    button4 = KeyboardButton('üìù Add contact')
    button_cancel = KeyboardButton('‚ùå Cancel')
    keyboard = ReplyKeyboardMarkup([[button2], [button3, button4], [button_cancel]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def f_start(update, context):
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id - 1)
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id)
    context.bot.send_message(update.message.chat.id, text="‚ö° Get ready? Set action and Go!",
                             reply_markup=key_reply_start())

def f_main(update, context):
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id-1)
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id)
    context.bot.send_message(update.message.chat.id, text='‚ùó Set action',
                             reply_markup=key_reply_main())

def f_mydata(update, context):
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id-1)
    context.bot.send_message(update.message.chat.id,
                                 text=f'`alexander.tsyrkun@gmail.com`\n\n'
                                 f'`sanchez01@mail.ru`\n\n'
                                 f'`123qweASD!`\n\n'
                                 f'`solstice@solmusic.moscow`',
                                 parse_mode="Markdown",
                                 reply_markup=key_reply_short())

def f_yt1(update, context):
    utlink = update.message.text
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id)

    def get_info(utlink):
        d = {
            'format': 'bestaudio/best',
            'postprocessors': [
                {
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192'
                }
            ]
        }
        ydl = youtube_dl.YoutubeDL(d)

        with ydl:
            result = ydl.extract_info(utlink, download=False)
            for index, (key, value) in enumerate(result.items()):
                if key == 'duration':
                    duration = value
                    conf = 'DURATION'
                    param = duration
                    m1.json_write(conf, param)
                if key == 'title':
                    title = value
                    conf = 'TITLE'
                    param = title
                    m1.json_write(conf, param)

    get_info(utlink)
    config = m1.json_read()
    duration = config['DURATION']
    title = config['TITLE']

    if duration > 480:
        context.bot.send_message(update.message.chat.id, text='‚ùó Set action',
                                 reply_markup=key_reply_main())
    else:
        context.bot.send_message(chat_id=update.message.chat.id, text=f'‚úÖ Got youtube link!',
                                 parse_mode="Markdown")
        MSG_UT = update.message.message_id
        MSG = update.message.message_id + 1

        link = m1.regex_yt(utlink)

        def my_hook(d):
            if d['status'] == 'downloading':
                context.bot.edit_message_text(
                    chat_id=update.message.chat.id,
                    message_id=MSG,
                    text=f'‚úÖ *Title*:\n\n_{title}_\n\nüì• *Progress*:_{d["_percent_str"]}_ with speed: _{d["_speed_str"]}_',
                    parse_mode="Markdown")
            if d['status'] == 'finished':
                file_name = d["filename"]
                mp3file = os.path.splitext(file_name)[0] + '.mp3'
                conf = 'MP3'
                param = mp3file
                m1.json_write(conf, param)

        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'progress_hooks': [my_hook],
        }

        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([link])

        config = m1.json_read()
        mp3file = config['MP3']

        context.bot.edit_message_text(
            chat_id=update.message.chat.id,
            message_id=MSG,
            text=f'‚úÖ *Done!* _Sending audiofile..._',
            parse_mode="Markdown")

        context.bot.send_audio(update.message.chat.id, audio=open(mp3file, 'rb'), title=mp3file[:-16],
                               duration=duration)
        context.bot.deleteMessage(update.message.chat.id, message_id=MSG)
        context.bot.deleteMessage(update.message.chat.id, message_id=MSG_UT)

        mypath = "./"
        for root, dirs, files in os.walk(mypath):
            for file in files:
                p = os.path.join(root, file)
                if os.path.isfile(p):
                    if p[-4:] == ".mp3":
                        os.remove(p)


def f_text(bot, update):
    config = m1.json_read()
    CHATBOTSTATE = config['CHATBOTSTATE']
    if CHATBOTSTATE == 'on':
        session_client = dialogflow.SessionsClient()
        session = session_client.session_path(DIALOGFLOW_PROJECT_ID, DIALOGFLOW_SESSION_ID)
        text_input = TextInput(text=text_to_be_analyzed, language_code=DIALOGFLOW_LANGUAGE)
        query_input = QueryInput(text=text_input)
        try:
            response = session_client.detect_intent(session=session, query_input=query_input)
        except InvalidArgument:
            raise
        print("Query text:", response.query_result.query_text)
        print("Detected intent:", response.query_result.intent.display_name)
        print("Detected intent confidence:", response.query_result.intent_detection_confidence)
        print("Fulfillment text:", response.query_result.fulfillment_text)
        if response.query_result.fulfillment_text == '':
            bot.message.reply_text('–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.')
        else:
            bot.message.reply_text(response.query_result.fulfillment_text)
    if CHATBOTSTATE == 'off':
        if bot.message.document:
            print('DOC!!')
        else:
            conf = 'NOTE_TEXT'
            param = bot.message.text
            m1.json_write(conf, param)
            conf = 'NOTE_FILE_CHECK'
            param = False
            m1.json_write(conf, param)
            bot.message.reply_text('‚ùó What to do?', reply_markup=key_reply_text(), quote=True)

def f_other(update, context):
    context.bot.deleteMessage(update.message.chat.id, message_id=update.message.message_id)
    msg = update.message
    conf = 'NOTE_FILE_CHECK'
    param = True
    m1.json_data(conf, param)
    if update.message.document:
        file_id = update.message.document.file_id
        file_name = update.message.document["file_name"]
        FILE_PATH = f'./FILES/{file_name}'
        FILE_NAME = file_name
        conf = 'NOTE_FILE_PATH'
        param = FILE_PATH
        m1.json_data(conf, param)
        conf = 'NOTE_FILE_NAME'
        param = FILE_NAME
        m1.json_data(conf, param)
        try:
            new_file = context.bot.getFile(file_id)
            new_file.download(FILE_PATH)
        except Exception as e:
            print(e)
        update.message.reply_text('‚ö† What to do with doc?', reply_markup=key_reply_text1(), reply_to_message_id=update.message.message_id)
    if update.message.photo:
        file_id = update.message.photo[-1]
        FILE_NAME = f'{update.message.photo[-1]["file_unique_id"]}.jpg'
        FILE_PATH = f'./FILES/{FILE_NAME}'
        conf = 'NOTE_FILE_PATH'
        param = FILE_PATH
        m1.json_data(conf, param)
        conf = 'NOTE_FILE_NAME'
        param = FILE_NAME
        m1.json_data(conf, param)
        try:
            new_file = context.bot.getFile(file_id)
            new_file.download(FILE_PATH)
        except Exception as e:
            print(e)
        update.message.reply_text('‚ö† What to do with photo?', reply_markup=key_reply_text1(), reply_to_message_id=update.message.message_id)
    if update.message.audio:
        file_id = update.message.audio.file_id
        FILE_NAME = str(file_id) + ".mp3"
        FILE_PATH = f'./FILES/{FILE_NAME}'
        conf = 'NOTE_FILE_PATH'
        param = FILE_PATH
        m1.json_data(conf, param)
        conf = 'NOTE_FILE_NAME'
        param = FILE_NAME
        m1.json_data(conf, param)
        try:
            new_file = context.bot.getFile(file_id)
            new_file.download(FILE_PATH)
        except Exception as e:
            print(e)
        update.message.reply_text('‚ö† What to do with audio?', reply_markup=key_reply_text1(), reply_to_message_id=update.message.message_id)
    if update.message.voice:
        file_id = update.message.voice.file_id
        FILE_NAME = str(file_id) + ".ogg"
        FILE_PATH = f'./FILES/{FILE_NAME}'
        conf = 'NOTE_FILE_PATH'
        param = FILE_PATH
        m1.json_data(conf, param)
        conf = 'NOTE_FILE_NAME'
        param = FILE_NAME
        m1.json_data(conf, param)
        try:
            new_file = context.bot.getFile(file_id)
            new_file.download(FILE_PATH)
        except Exception as e:
            print(e)
        update.message.reply_text('‚ö† What to do with voice?', reply_markup=key_reply_text1(), reply_to_message_id=update.message.message_id)
    if update.message.video:
        file_id = update.message.video.file_id
        FILE_NAME = str(file_id) + ".mp4"
        FILE_PATH = f'./FILES/{FILE_NAME}'
        conf = 'NOTE_FILE_PATH'
        param = FILE_PATH
        m1.json_data(conf, param)
        conf = 'NOTE_FILE_NAME'
        param = FILE_NAME
        m1.json_data(conf, param)
        try:
            new_file = context.bot.getFile(file_id)
            new_file.download(FILE_PATH)
        except Exception as e:
            print(e)
        update.message.reply_text('‚ö† What to do with video?', reply_markup=key_reply_text1(), reply_to_message_id=update.message.message_id)
    else:
        conf = 'NOTE'
        param = update.message.text
        config = m1.json_data(conf, param)
############################ Keyboards reply ########################################


##### W

def key_reply_t1():
    button1 = KeyboardButton('üìÇ MUSIC')
    button2 = KeyboardButton('üìÇ IT')
    button3 = KeyboardButton('üìÇ OTHER')
    button_cancel = KeyboardButton('‚ùå Cancel')
    keyboard = ReplyKeyboardMarkup([[button1, button2, button3], [button_cancel]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_t2():
    button1 = KeyboardButton('üìã TASK_DATA')
    button2 = KeyboardButton('üìã TASK_IT_PYTHON')
    button3 = KeyboardButton('üìã TASK_IT_INFO')
    button_back = KeyboardButton('üîô Back')
    button_cancel = KeyboardButton('‚ùå Cancel')
    keyboard = ReplyKeyboardMarkup([[button1], [button2], [button3], [button_back, button_cancel]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_t3():
    button1 = KeyboardButton('üìã TASK_MUSIC')
    button2 = KeyboardButton('üìã TASK_PRODUCTION')
    button_back = KeyboardButton('üîô Back')
    button_cancel = KeyboardButton('‚ùå Cancel')
    keyboard = ReplyKeyboardMarkup([[button1], [button2], [button_back, button_cancel]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def key_reply_t4():
    button1 = KeyboardButton('üìã TASK_OTHER')
    button2 = KeyboardButton('üìã TASK_SEX')
    button_back = KeyboardButton('üîô Back')
    button_cancel = KeyboardButton('‚ùå Cancel')
    keyboard = ReplyKeyboardMarkup([[button1], [button2], [button_back, button_cancel]], resize_keyboard=True, one_time_keyboard=True)
    return keyboard

def f_task_start(update, context):
    update.message.reply_text('üìù Enter title:', reply_markup=ReplyKeyboardRemove())
    return "STEP1"

def f_task1(update, context):
    conf = 'NOTE_TITLE'
    param = update.message.text
    m1.json_data(conf, param)
    update.message.reply_text('üìÇ Select Project:', reply_markup=key_reply_t1())
    return "STEP2"

def f_task2(update, context):
    project_name = update.message.text
    if project_name == 'üìÇ IT':
        update.message.reply_text('üìã Select Task:', reply_markup=key_reply_t2())
        return "STEP3"
    if project_name == 'üìÇ MUSIC':
        update.message.reply_text('üìã Select Task:', reply_markup=key_reply_t3())
        return "STEP3"
    if project_name == 'üìÇ OTHER':
        update.message.reply_text('üìã Select Task:', reply_markup=key_reply_t4())
        return "STEP3"
    if project_name == '‚ùå Cancel':
        context.bot.send_message(update.message.chat.id, text='‚ùå Cancelled by user')
        return ConversationHandler.END

def f_task3(update, context):
    input_text = update.message.text
    m1.delete_files(path='FILES')
    if input_text == 'üìã TASK_MUSIC':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_MUSIC, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/MUSIC/TASK_MUSIC/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_MUSIC, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_PRODUCTION':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_PRODUCTION, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/MUSIC/TASK_PRODUCTION/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_PRODUCTION, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_OTHER':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_OTHER, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/OTHER/TASK_OTHER/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_OTHER, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_SEX':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_SEX, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/OTHER/TASK_SEX/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_SEX, COMMENT)
        update.message.reply_text(f'‚úîÔ∏èComment added! URL:\n\n'
                                  f'https://todoist.com/app/project/2276636316/task/5302503083/comments#', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_IT_INFO':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_IT_INFO, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/IT/TASK_IT_INFO/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_IT_INFO, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_IT_PYTHON':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_IT_PYTHON, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/IT/TASK_IT_PYTHON/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_IT_PYTHON, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üìã TASK_DATA':
        config = m1.json_data()
        NOTE_FILE_CHECK = config['NOTE_FILE_CHECK']
        if NOTE_FILE_CHECK is False:
            config = m1.json_data()
            NOTE_TEXT = config['NOTE_TEXT']
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\nText:\n\n{NOTE_TEXT}'
            td1.add_comment_text(TODOLIST_TASK_IT_DATA, COMMENT)
        elif NOTE_FILE_CHECK is True:
            config = m1.json_data()
            NOTE_FILE_PATH = config['NOTE_FILE_PATH']
            NOTE_FILE_NAME = config['NOTE_FILE_NAME']
            PATH_TO_DISPLAY = d1.drop_upload_file(FILE=NOTE_FILE_PATH, PATHTO=f'/INFO/IT/TASK_IT_DATA/{NOTE_FILE_NAME}')
            NOTE_TITLE = config['NOTE_TITLE']
            COMMENT = f'{NOTE_TITLE}\n\nAttachment dropbox link:\n{PATH_TO_DISPLAY}'
            td1.add_comment_text(TODOLIST_TASK_IT_DATA, COMMENT)
        update.message.reply_text('‚úîÔ∏èComment added!', reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    if input_text == 'üîô Back':
        context.bot.send_message(update.message.chat.id, text="Try:")
        return "STEP1"
    if input_text == '‚ùå Cancel':
        context.bot.send_message(update.message.chat.id, text='‚ùå Cancelled by user')
        return ConversationHandler.END

def f_task_cancel(update, context):
    context.bot.send_message(update.message.chat.id, text="CANCEL", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

##### W

def f_task_mail(update, context):
    update.message.reply_text('–ö–∞–∫–∞—è —Ç–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è?')
    return "STEP7"

def f_task_mail2(update, context):
    email_sbj = update.message.text
    config = m1.load_json_data('./config_var.json')
    config['EMAIL_SBJ'] = email_sbj
    m1.save_json_data(config, './config_var.json')
    update.message.reply_text('–ù–∞ –∫–∞–∫–æ–π —è—â–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å? –í–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:',
                              reply_markup=key_reply_mail())
    return "STEP8"

def f_task_mail3(update, context):
    email_to = update.message.text
    config = m1.load_json_data('./config_var.json')
    email_text = config['TASK_TEXT']
    email_sbj = config['EMAIL_SBJ']
    # email_att = config['FILES_PATH']
    result = mail1.send_simple_text_mail(text=email_text, to=email_to, sbj=email_sbj)
    print(f'result: {result}')
    if result == 'OK!':
        context.bot.send_message(update.message.chat.id, text="–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                                 reply_markup=key_reply_main1())
    else:
        context.bot.send_message(update.message.chat.id, text="–û—à–∏–±–∫–∞...",
                                 reply_markup=key_reply_main1())
    return ConversationHandler.END

def f_task_contact(update, context):
    NEW_CONTACT = update.message.text

    contact = InputPhoneContact(client_id=0, phone=NEW_CONTACT, first_name="ABC", last_name="abc")
    result = client.invoke(ImportContactsRequest([contact], replace=True))

def f_task_cancel(update, context):
    context.bot.send_message(update.message.chat.id, text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –¥–∞–ª—å—à–µ", reply_markup=key_reply_start())
    return ConversationHandler.END

################ TRASLATE
def f_translate_start(update, _):
    update.message.reply_text('‚Ü© –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:',
                              reply_markup=key_reply_translate())
    return "INPUTTEXT"


def f_translate_ln(update, context):
    input_text = update.message.text
    if input_text == 'üá∫üá∏EN->RUüá∑üá∫':
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (üá∫üá∏EN):',
                                  reply_markup=ReplyKeyboardRemove())
        return "ENRU"
    if input_text == 'üá∑üá∫RU->ENüá∫üá∏':
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (üá∑üá∫RU):\n',
                                  reply_markup=ReplyKeyboardRemove())
        return "RUEN"


def f_translate_enru(update, context):
    input_text = update.message.text
    input_text_message_id = update.message.message_id
    output_text = ts.google(input_text, from_language='en', to_language='ru')

    context.bot.send_message(
        update.message.chat.id,
        text=f'‚úîÔ∏è–ü–µ—Ä–µ–≤–æ–¥:\n\n'
        f'`{output_text}`\n\n'
        f'*Tip*: –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
        f'(_–¢–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö_)',
        parse_mode="Markdown",
        reply_markup=key_reply_translate2(),
        reply_to_message_id=input_text_message_id)
    return ConversationHandler.END


def f_translate_ruen(update, context):
    input_text = update.message.text
    input_text_message_id = update.message.message_id
    output_text = ts.google(input_text, from_language='ru', to_language='en')

    context.bot.send_message(
        update.message.chat.id,
        text=f'‚úîÔ∏è–ü–µ—Ä–µ–≤–æ–¥:\n\n'
        f'`{output_text}`\n\n'
        f'*Tip*: –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
        f'(_–¢–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö_)',
        parse_mode="Markdown",
        reply_markup=key_reply_translate2(),
        reply_to_message_id=input_text_message_id)
    return ConversationHandler.END


def f_translate_cancel(update, context):
    context.bot.send_message(update.message.chat.id,
                             text="‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω",
                             reply_markup=key_reply_main1())
    return ConversationHandler.END


################ TTS


def f_tts_start(update, context):
    # print(f'f_tts_start: {update.message}')
    context.bot.deleteMessage(update.message.chat.id,
                              message_id=update.message.message_id)
    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n'
        '1. Speech to Text - –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç\n'
        '2. Text to Speech - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–µ'
        '',
        reply_markup=key_reply_tts1())
    return "STEP1"


def f_tts1(update, context):
    context.bot.deleteMessage(update.message.chat.id,
                              message_id=update.message.message_id)
    input_text = update.message.text
    if input_text == 'Speech to Text':
        update.message.reply_text(
            'üé∂ –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:',
            reply_markup=ReplyKeyboardRemove())
        return "STEP2"
    if input_text == 'Text to Speech':
        update.message.reply_text(
            'üìÑ –û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–∏—Ä—Ä–∏–ª–∏—Ü–∞):\n',
            reply_markup=ReplyKeyboardRemove())
        return "STEP2"


def f_tts2(update, context):
    input_text = update.message.text
    tts_filename = str(update.message.from_user.id)
    config = m1.load_json_data('./config_var.json')
    config['TTS_INPUT_TEXT'] = input_text
    m1.save_json_data(config, './config_var.json')
    tts_text_input = input_text
    tts = gTTS(text=tts_text_input, lang='ru')
    tts.save(f'./{tts_filename}.mp3')
    context.bot.send_message(update.message.chat.id,
                             text=f'*‚úî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ:*',
                             parse_mode="Markdown",
                             reply_to_message_id=update.message.message_id,
                             reply_markup=key_reply_tts2())

    context.bot.send_audio(update.message.chat.id,
                           audio=open(f'./{tts_filename}.mp3', 'rb'))
    path = "/"
    ext = '.mp3'
    m1.delete_files(path, ext)
    return ConversationHandler.END


def f_tts3(update, context):
    file_duration = update.message.voice.duration
    if file_duration < 2:
        update.message.reply_text(
            text=
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 2 —Å–µ–∫—É–Ω–¥! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë:',
            reply_markup=ReplyKeyboardRemove())
        return "STEP2"
    file = context.bot.getFile(update.message.voice.file_id)
    file_id = str(update.message.message_id)
    filename = "tts-" + file_id + ".ogg"
    path = f'./{filename}'
    file.download(path)
    config = m1.load_json_data('./config_var.json')
    config['STT_JOB_ID'] = r1.convert_start(path)
    m1.save_json_data(config, './config_var.json')
    update.message.reply_text(
        text=
        f'_‚úî –ü–æ–ª—É—á–µ–Ω–∞ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è. –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏, '
        f'—Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, —Ç–æ'
        f' –æ–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç 15 —Å–µ–∫—É–Ω–¥ –¥–æ –º–∏–Ω—É—Ç—ã._',
        parse_mode="Markdown",
        reply_to_message_id=update.message.message_id,
        reply_markup=key_reply_tts3())
    path = "/"
    ext = '.ogg'
    m1.delete_files(path, ext)
    return "STEP3"


def f_tts_wrong(update, context):
    context.bot.send_message(update.message.chat.id,
                             text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
    return "STEP2"


def f_tts4(update, context):
    input_text = update.message.text
    config = m1.load_json_data('./config_var.json')
    job_id = config['STT_JOB_ID']

    output_text = r1.convert1(job_id)
    context.bot.send_message(
        update.message.chat.id,
        text=f'‚úîÔ∏è_–ü–µ—Ä–µ–≤–æ–¥_:\n\n'
        f'`{output_text}`\n\n'
        f'*Tip*: –ö–ª–∏–∫–Ω–∏ –Ω–∞ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'
        f'(_–¢–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö_)',
        parse_mode="Markdown",
        reply_markup=key_reply_tts2(),
        reply_to_message_id=update.message.message_id)
    return ConversationHandler.END


def f_tts_cancel(update, context):
    context.bot.send_message(update.message.chat.id,
                             text=f'_‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º_',
                             parse_mode="Markdown",
                             reply_markup=key_reply_main1())
    return ConversationHandler.END


def f_talk_dialogflow_onoff(update, context):
    config = m1.load_json_data('./config_var.json')
    STATE = config['CHATBOTSTATE']
    if STATE == 'off':
        config['CHATBOTSTATE'] = 'on'
        STATE = config['CHATBOTSTATE']
        m1.save_json_data(config, './config_var.json')
        context.bot.send_message(update.message.chat.id, text=f'_üí¨ –ß–∞—Ç-–±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω_', reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
    elif STATE == 'on':
        config['CHATBOTSTATE'] = 'off'
        STATE = config['CHATBOTSTATE']
        m1.save_json_data(config, './config_var.json')
        context.bot.send_message(update.message.chat.id, text=f'_üí§ –ß–∞—Ç-–±–æ—Ç –¥–µ-–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω_', reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")

def f_faq(update, context):
    context.bot.send_message(update.message.chat.id, text=f'–≠—Ç–æ—Ç –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –º–Ω–æ–≥–æ–µ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º (—Ç—ã –ø–æ–ª—É—á–∏—à—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –ø–æ—è–≤–∏—Ç—Å—è).\n'
                                                          '_–ü–æ—á—Ç–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—ã –º–æ–∂–µ—à—å –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–∏–∑—É_\n\n'
                                                          'üí° –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n'
                                                          '*1. üá∫üá∏-üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫*. _–û–Ω–ª–∞–π–Ω-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—ã EN-RU_\n'
                                                          '*2. üìÇ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ*. _–ë–æ—Ç –º–æ–∂–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å, –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏. –î–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ_\n'
                                                          '*3. üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä YouTube & Shazam –≤ MP3*. _–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Youtube-—Å—Å—ã–ª–∫–æ–π –∏–ª–∏ Shazam –∏ –æ–Ω –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ mp3-—Ñ–∞–π–ª_\n'
                                                          '*6.üîâ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä STT&TTS*. _–ë–æ—Ç —É–º–µ–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç_\n\n'
                                                          'üí° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç:\n'
                                                          '/s - *–º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é*\n'
                                                          '/h - *FAQ*\n'
                                                          '/b - *–∞–∫—Ç–∏–≤–∞—Ü–∏—è\–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç-–±–æ—Ç–∞*\n\n'

                                                          'üí° –í —Ä–µ–∂–∏–º–µ —Å —á–∞—Ç-–±–æ—Ç–æ–º –¥–æ–±–≤–ª—è–µ—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∞–º–æ–æ–±—É—á–∞–µ–º—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∫–∞ —É –Ω–µ–≥–æ –ø–æ—á—Ç–∏ –Ω–µ–ª—É–≤–æ–π –æ–ø—ã—Ç, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–Ω –º–æ–∂–µ—Ç\n'
                                                          '–Ω–∞—É—á–∏—Ç—å—Å—è –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –ø–æ–Ω–∏–º–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã.', parse_mode="Markdown", reply_markup=key_reply_start())

def f_test(update, context):
    cur_m = update.message.message_id + 10

    def get_10_mes(cur_m):
        list = []
        for i in range(30):
            m = cur_m - i
            try:
                context.bot.deleteMessage(update.message.chat.id, message_id=m)
            except Exception as e:
                print(e)

    try:
        get_10_mes(cur_m)
    except Exception as e:
        print(e)

##### W


##### W

def f_voice(update, context):
    file = context.bot.getFile(update.message.voice.file_id)
    file_id = str(update.message.message_id)
    filename = "tts-" + file_id + ".ogg"
    path = f'./FILES/TTS/{filename}'
    try:
        file.download(path)
    except:
        raise
    update.message.reply_text('–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?', reply_markup=key_reply_reminder(),
                           reply_to_message_id=update.message.message_id)

def f_photo(update, context):
    file = context.bot.getFile(update.message.photo[-1])
    file_id = str(update.message.message_id)
    path = f'./FILES/{file_id}.jpg'
    config = m1.load_json_data('./config_var.json')
    config['FILES_PATH'] = path
    config['FILES_ATT'] = True
    m1.save_json_data(config, './config_var.json')
    file.download(path)
    context.bot.send_photo(update.message.chat.id, photo=open(f'./FILES/{file_id}.jpg', 'rb'))

    update.message.reply_text('–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ñ–æ—Ç–æ?', reply_markup=key_reply_reminder(),
                           reply_to_message_id=update.message.message_id)

def f_document(update, context):
    file_id = update.message.document.file_id
    file_name = update.message.document["file_name"]
    mime_type = update.message.document["mime_type"]
    file_size = update.message.document["file_size"]
    FILE_PATH = f'./FILES/{file_name}'
    print(f' File: {file_name}\n{mime_type}\n{FILE_PATH}')
    try:
        new_file = context.bot.getFile(file_id)
        new_file.download(FILE_PATH)
    except Exception as e:
        print(e)
    result = d1.drop_upload_file(FILE=FILE_PATH, PATHTO=f'/INFO/TEST/{file_name}')
    print(result)


    # path = f'./FILES/{file_id}.f'
    # file.download(path)
    # context.bot.send_photo(update.message.chat.id, photo=open(f'./FILES/{file_id}.pdf', 'rb'))
    #
    # update.message.reply_text('–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?', reply_markup=key_reply_reminder(),
    #                        reply_to_message_id=update.message.message_id)

def f_files(update, context):
    bot.send_audio(chat_id=update.message.chat.id, audio=open('tests/test.mp3', 'rb'))
    bot.send_document(update.message.chat.id, document=open('tests/test.zip', 'rb'))
    file_id = update.message.voice.file_id
    file = update.message.photo[-1]
    newFile = bot.get_file(file_id)
    newFile.download('voice.ogg')
    # path = file.download("1.jpg")
    # context.bot.send_message(update.message.chat.id, text='–ü–æ—Å–ª–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É?', reply_markup=key_reply_media())

def f_send_data(update, context):
    from_user = update.message.from_user
    from_user_id = update.message.from_user.id
    from_user_username = update.message.from_user.username
    try:
        context.bot.send_message(TG_SOLSUPERGROUP_ID, text=f'–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n'\
                                                     f'1. USER: {from_user}\n' \
                                                     f'2. ID: {from_user_id}\n' \
                                                     f'3. USERNAME: {from_user_username}', reply_markup=key_reply_main1())
    except Exception as e:
        print(e)
    context.bot.send_message(TG_SOL_ID, text=f'–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:\n'\
                                                     f'1. USER: {from_user}\n' \
                                                     f'2. ID: {from_user_id}\n' \
                                                     f'3. USERNAME: {from_user_username}', reply_markup=key_reply_main1())

def f_callbackbutton(update, context):
    query = update.callback_query
    print(f' query: {query}')
    query.answer()
    callback_data = query.data
    print(f' callback_data: {callback_data}')
    query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {callback_data}")

def f_all(update, context):
    print(f' NA: {update.message}')
    context.bot.send_message(update.message.chat.id, text="‚ùå –î–∞–Ω–Ω—ã–π –≤–∏–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", reply_markup=key_reply_start())

def f_error(update, context):
    try:
        raise context.error
    except Unauthorized as e:
        print(f'Update {update} caused error: {e}')
    except BadRequest as e:
        print(f'Update {update} caused error: {e}')
    except TimedOut as e:
        print(f'Update {update} caused error: {e}')
    except NetworkError as e:
        print(f'Update {update} caused error: {e}')
    except ChatMigrated as e:
        print(f'Update {update} caused error: {e}')
    except TelegramError as e:
        print(f'Update {update} caused error: {e}')

############################# Handlers #########################################

def main():

    updater = Updater(TOKEN, use_context=True)
    bot = updater.dispatcher


    bot.add_handler(CommandHandler(['s'], f_start))
    bot.add_handler(CommandHandler(['start'], f_start))
    bot.add_handler(CommandHandler(['t'], f_test))
    bot.add_handler(CommandHandler(['help', 'h'], f_faq))


    bot.add_handler(
        MessageHandler(
            Filters.regex('üìï MENU') | Filters.regex('‚ùå –ù–µ –Ω–∞–¥–æ')
            | Filters.regex('‚ùå –ù–µ—Ç') | Filters.regex('üìï –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
            | Filters.regex('‚ùå Cancel'), f_main))
    bot.add_handler(MessageHandler(Filters.regex('‚ùì FAQ'), f_faq))
    bot.add_handler(MessageHandler(Filters.regex('üîô –ù–∞–∑–∞–¥'), f_start))
    bot.add_handler(MessageHandler(Filters.regex('TEST'), f_test))
    bot.add_handler(MessageHandler(Filters.regex('üìÇ My Data'), f_mydata))

    bot.add_handler(MessageHandler(
                Filters.regex('https://www.youtube.com')
                | Filters.regex('https://youtu.be')
                | Filters.regex('https://youtube.com'), f_yt1))



    bot.add_handler(
        MessageHandler(
            Filters.regex('üí§ –û—Ç–∫–ª—é—á–∏—Ç—å —á–∞—Ç–±–æ—Ç–∞')
            | Filters.regex('ü§ñ Talk to Chatbot'), f_talk_dialogflow_onoff))




    conversation_handler_translate = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('üá∫üá∏-üá∑üá∫ Translate') | Filters.regex('‚Ü© –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë?'), f_translate_start)
        ],
        states={
            "INPUTTEXT": [MessageHandler(Filters.regex('^(üá∫üá∏EN->RUüá∑üá∫|üá∑üá∫RU->ENüá∫üá∏)$'), f_translate_ln)],
            "ENRU": [MessageHandler(Filters.text & ~Filters.command, f_translate_enru)],
            "RUEN": [MessageHandler(Filters.text & ~Filters.command, f_translate_ruen)]
        },
        fallbacks=[
            MessageHandler(Filters.regex('‚ùå –û—Ç–º–µ–Ω–∞') | Filters.regex('‚ùå –ù–µ—Ç'), f_translate_cancel)
        ]
    )

    conversation_handler_task = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('‚è∞ Add note'), f_task_start)
        ],
        states={
            "STEP1": [MessageHandler(Filters.text, f_task1)],
            "STEP2": [MessageHandler(Filters.text, f_task2)],
            "STEP3": [MessageHandler(Filters.text, f_task3)],
        },
        fallbacks=[
            MessageHandler(Filters.regex('‚ùå Cancel'), f_task_cancel),
            MessageHandler(Filters.regex('üîô Back'), f_task2)
        ]
    )

    conversation_handler_stt = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('üîâ STT&TTS') | Filters.regex('‚Ü© –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë'), f_tts_start)
        ],
        states={
            "STEP1": [
                # MessageHandler(Filters.text, f_tts1),
                MessageHandler(Filters.regex('üé∂SPEECH TO üìÑTEXT') | Filters.regex('üìÑTEXT TO üé∂SPEECH'), f_tts1)
            ],
            "STEP2": [
                MessageHandler(Filters.text, f_tts2),
                MessageHandler(Filters.voice, f_tts3),
                MessageHandler(Filters.document | Filters.photo | Filters.audio, f_tts_wrong)
            ],
            "STEP3": [
                MessageHandler(Filters.text, f_tts4)
            ],
        },
        fallbacks=[
            MessageHandler(Filters.regex('‚ùå –û—Ç–º–µ–Ω–∞') | Filters.regex('‚ùå –ù–µ—Ç'), f_tts_cancel)
        ]
    )


    bot.add_handler(conversation_handler_task)
    bot.add_handler(conversation_handler_stt)
    bot.add_handler(conversation_handler_translate)



    bot.add_handler(MessageHandler(Filters.video | Filters.audio | Filters.voice | Filters.document | Filters.photo, f_other))
    bot.add_handler(MessageHandler(Filters.forwarded | Filters.caption, f_other))
    bot.add_handler(MessageHandler(Filters.text, f_text))
    bot.add_handler(CallbackQueryHandler(f_callbackbutton))
    bot.add_handler(MessageHandler(Filters.all, f_all))
    updater.dispatcher.add_error_handler(f_error)

    updater.start_webhook(listen="0.0.0.0",
                          port=PORT,
                          url_path=TOKEN,
                          webhook_url="https://tgsolbot.herokuapp.com/" + TOKEN)
    updater.idle()

if __name__ == '__main__':
    main()
